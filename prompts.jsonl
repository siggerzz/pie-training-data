{"prompt": "What is the main purpose of using colour in the PIE design system?", "completion": "In the PIE design system, colour is used primarily for clear communication. It supports the purpose of the content, communicating things like hierarchy of information, interactive states, and the difference between distinct elements."}
{"prompt": "What are some of the meanings determined for the ‘Supportive’ colour palette in the PIE design system?", "completion": "In the PIE design system, colours in the 'Supportive' palette are used to convey specific meanings or functions within the products' interfaces. These defined colour roles make things easy to modify and customise later and extend the colour system so it works across any touchpoint at JET."}
{"prompt": "How does the PIE design system ensure accessibility with its colour system?", "completion": "The PIE design system's colour system is designed within the HSLuv colour space to generate themes that meet WCAG 2.1 compliant contrast ratios. This makes interface elements easier to find, identify, and interact with, and makes the whole experience more accessible for users who are colour-blind or who have low vision. However, information should never be conveyed using colour alone."}
{"prompt": "What is the significance of orange in the PIE design system?", "completion": "Orange represents the joyful personality of the brand in the PIE design system. It's bold, energising and is used wherever communication occurs. However, due to colour contrast and accessibility issues, an additional colour called $color-orange has been introduced for use in designs."}
{"prompt": "What is the difference between Brand orange and Product orange in the PIE design system?", "completion": "Brand orange is used for non-interactive elements like logos, illustrations, splash screens, navigation bars, and marketing panel backgrounds. Product orange, a modified version of Brand orange, is used for interactive elements and components in interfaces, such as buttons, icons, interactive text, and headings."}
{"prompt": "What is the purpose of using elevation in the PIE design system?", "completion": "In the PIE design system, elevation is used to create a visual distinction between components and visual elements with different spatial relationships. It assigns a three-dimensional appearance to an object, using shadows and blurs to achieve it. The levels of elevation help differentiate the elevation within the Z-axis at which these components are placed."}
{"prompt": "How can elevation be used to distinguish overlapping elements in the PIE design system?", "completion": "For components which appear on top of other elements of the design, elevation can be used to make them more visible. This helps to create a sense of depth and hierarchy in the design."}
{"prompt": "How can different levels of elevation be used to create hierarchy in the PIE design system?", "completion": "If multiple design elements need to use elevation, more elevation can be assigned to the component with the most importance. This helps to differentiate them and indicate a clear hierarchy for the users."}
{"prompt": "What is the advice given on the use of elevation in the PIE design system?", "completion": "Elevation should be used consistently but sparingly. This helps users understand the hierarchy and interaction patterns for the design elements in your product. Using too many elevation tokens in your designs can diminish the user’s experience."}
{"prompt": "What is the visual effect of using different elevation tokens like $elevation-04 and $elevation-01 in the PIE design system?", "completion": "Using different elevation tokens like $elevation-04 and $elevation-01 creates a difference in hierarchy. The component with a higher elevation appears more prominent, indicating its importance in the hierarchy."}
{"prompt": "What is the purpose of icons in the PIE design system?", "completion": "In the PIE design system, icons are graphic symbols that are used to represent concepts, objects or actions. They help to communicate information quickly and effectively, often supplementing or replacing text."}
{"prompt": "What is the 'Alert & Info' category of icons in the PIE design system?", "completion": "The 'Alert & Info' category of icons in the PIE design system includes icons such as 'Alert Circle', 'Alert Triangle', 'Help Circle', 'Info Circle', and 'Info Marker'. These icons are typically used to draw attention to important information or warnings."}
{"prompt": "What is the 'Arrow' category of icons in the PIE design system?", "completion": "The 'Arrow' category of icons in the PIE design system includes various types of arrow icons, such as 'Arrow Down', 'Arrow Left', 'Arrow Right', 'Arrow Up', and 'Arrow Up Left'. These icons are typically used to indicate direction or movement."}
{"prompt": "When should I use the $color-mozzarella-5 token?", "completion": "$color-mozzarella-5' is used for the 'Default page background'."}
{"prompt": "When should I use the $color-mozzarella-10 token?", "completion": "$color-mozzarella-10' is used for the 'Subtle page background'."}
{"prompt": "When should I use the $color-mozzarella-100 token?", "completion": "The token '$color-mozzarella-100' is used for the 'High contrast page background'."}
{"prompt": "When should I use the $color-black @50% token?", "completion": "The token '$color-black @50%' is used for the 'Translucent background overlay'."}
{"prompt": "When should I use the $color-white token?", "completion": "The token '$color-white' is used for the 'Default container background', 'Inverse interactive colour used mainly in button and CTA backgrounds', 'Light interactive colour used on dark backgrounds', 'Text and icon colour used on dark backgrounds', 'Text and icon colour used on inverse backgrounds', 'Colour for the text and icons of primary interactive elements', 'Persistent text and icon colour for dark backgrounds. Uses the same global token in all themes', 'Text and icon colour for inverse backgrounds', 'Persistent text and icon colour for dark backgrounds. Uses the same global token in all themes."}
{"prompt": "When should I use the $color-mozzarella-20 token?", "completion": "The token '$color-mozzarella-20' is used for the 'Strong container background', 'Default border', 'Colour used for disabled UI elements'."}
{"prompt": "When should I use the $color-mozzarella-90 token?", "completion": "The token '$color-mozzarella-90' is used for the 'Dark container background', 'Inverse container background', 'Primary interactive colour used mainly in button and CTA backgrounds, accent fills and borders'."}
{"prompt": "When should I use the $color-orange token?", "completion": "The token '$color-orange' is used for the 'Brand interactive colour used mainly in button and CTA backgrounds, accent fills and borders', 'Brand text and icon colour', 'Brand colour for interactive text and icons'."}
{"prompt": "When should I use the $color-mozzarella-60 token?", "completion": "The token '$color-mozzarella-60' is used for the 'Field background on $background-default'."}
{"prompt": "When should I use the $color-mozzarella-30 token?", "completion": "The token '$color-mozzarella-30' is used for the 'Higher contrast border'."}
{"prompt": "When should I use the $color-mozzarella-70 token?", "completion": ""}
{"prompt": "When should I use the $color-black @8% token?", "completion": ""}
{"prompt": "When should I use the $color-white @20% token?", "completion": ""}
{"prompt": "When should I use the $color-mozzarella-20 token?", "completion": ""}
{"prompt": "When should I use the $color-red token?", "completion": "$color-red is used for 'Error; high-impact messaging', 'Text and icon colour for error messaging'."}
{"prompt": "When should I use the $color-red-10 token?", "completion": "$color-red-10 is used for 'Low contrast version of $support-error'."}
{"prompt": "When should I use the $color-yellow token?", "completion": "$color-yellow is used for 'Warning; moderate impact messaging', 'Discretionary brand surfaces and effects'."}
{"prompt": "When should I use the $color-yellow-10 token?", "completion": "$color-yellow-10 is used for 'Low contrast version of $support-warning'."}
{"prompt": "When should I use the $color-green token?", "completion": "$color-green is used for 'Success; positive messaging', 'Text and icon colour for success messaging'."}
{"prompt": "When should I use the $color-green-10 token?", "completion": "$color-green-10 is used for 'Low contrast version of $support-positive'."}
{"prompt": "When should I use the $color-green-30 token?", "completion": "$color-green-30 is used for 'High contrast version of $support-positive to be used over dark backgrounds'."}
{"prompt": "When should I use the $color-blue token?", "completion": "$color-blue is used for 'Information; instructional messaging', 'Text and icon colour for high visibility links'."}
{"prompt": "When should I use the $color-blue-10 token?", "completion": "$color-blue-10 is used for 'Low contrast version of $support-info'."}
{"prompt": "When should I use the $color-blue-30 token?", "completion": "$color-blue-30 is used for 'High contrast version of $support-info to be used over dark backgrounds', 'Colour used for outline focus states'."}
{"prompt": "When should I use the $color-orange-30 token?", "completion": "$color-orange-30 is used for 'Special; special attention messaging'."}
{"prompt": "When should I use the $color-orange-10 token?", "completion": "$color-orange-10 is used for 'Low contrast version of $support-brand-01 for subtle surfaces and effects'."}
{"prompt": "When should I use the $color-blue-25 token?", "completion": "$color-blue-25 is used for 'Discretionary brand surfaces and effects'."}
{"prompt": "When should I use the $color-red-25 token?", "completion": "$color-red-25 is used for 'Discretionary brand surfaces and effects'."}
{"prompt": "When should I use the $color-purple token?", "completion": "$color-purple is used for 'Discretionary brand surfaces and effects'."}
{"prompt": "When should I use the $color-orange-55 token?", "completion": "$color-orange-55 is used for 'Discretionary brand surfaces and effects'."}
{"prompt": "When should I use the $color-charcoal-80 token?", "completion": "$color-charcoal-80 is used for 'Default text and icon colour', 'Colour for the text and icons of secondary interactive elements', 'Text and icon colour for links', 'Persistent colour for interactive text and icons on light backgrounds. Uses the same global token in all themes'."}
{"prompt": "When should I use the $color-charcoal-70 token?", "completion": "$color-charcoal-70 is used for 'Subdued text and icon colour used for secondary text and input labels'."}
{"prompt": "When should I use the $color-charcoal-50 token?", "completion": "$color-charcoal-50 is used for 'Text and icon colour to mark them as disabled'."}
{"prompt": "When should I use the $color-charcoal-75 token?", "completion": "$color-charcoal-75 is used for 'Colour for the text and icons of tertiary interactive elements'."}
{"prompt": "When should I use the $color-charcoal-60 token?", "completion": "$color-charcoal-60 is used for 'Subdued text and icon colour used for text and icons'."}
{"prompt": "When should I use the $color-system-purple token?", "completion": "$color-system-purple is used for 'Text and icon colour for visited links'."}
{"prompt": "When should I use the $color-system-purple-10 token?", "completion": "$color-system-purple-10 is used for 'Text and icon colour for visited links on inverse backgrounds'."}
{"prompt": "When should I use the $color-hover-darken token?", "completion": "$color-hover-darken is used for 'Opacity effect for hover states on default backgrounds', 'Persistent opacity effect for hover states on light backgrounds. Uses the same global token in all themes'."}
{"prompt": "When should I use the $color-hover-lighten token?", "completion": "$color-hover-lighten is used for 'Opacity effect for hover states on inverse backgrounds', 'Persistent opacity effect for hover states on dark backgrounds. Uses the same global token in all themes'."}
{"prompt": "When should I use the $color-active-darken token?", "completion": "$color-active-darken is used for 'Opacity effect for active states on default backgrounds', 'Opacity effect for active states on light backgrounds. Uses the same global token in all themes'."}
{"prompt": "When should I use the $color-active-lighten token?", "completion": "$color-active-lighten is used for 'Opacity effect for active states on inverse backgrounds', 'Opacity effect for active states on dark backgrounds. Uses the same global token in all themes'."}
{"prompt": "When should I use the $color-mozzarella-80 token?", "completion": "$color-mozzarella-80 is used for 'Colour used for disabled UI elements on inverse backgrounds'."}
{"prompt": "Why is radius used in the PIE design system?", "completion": "In the PIE design system, radius is used to emphasise and highlight specific design features in the products. It's easier to scan an interface by following circles and curves rather than abrupt edges, which can disrupt the line of sight."}
{"prompt": "What are the types of radius used in the PIE design system?", "completion": "The PIE design system uses two types of radius to give rounded edges to components: Partial rounding and Full rounding. Partial rounding maintains the component proportions by partially rounding their edges, using multiples of 4px/pt/dp to set the levels of roundness. Full rounding creates fully-rounded corners keeping the component proportions, using a set size of 50rem."}
{"prompt": "How should radius be used in the PIE design system?", "completion": "In the PIE design system, design elements that are in a higher position within the visual hierarchy will use corners that are more rounded (with a larger corner radius) while elements that sit lower in the visual hierarchy will use corners that are less rounded (with a smaller corner radius)."}
{"prompt": "What are the alias radius tokens in the PIE design system?", "completion": "The PIE design system provides alias radius tokens for consistent use of radiuses. These include $radius-00 for no rounding, $radius-02 for small tags (Rounded A), $radius-03 for data visualisation elements, tags, logos and toast components (Rounded B), $radius-04 for cards, popovers, notifications, headers, navigation bars and side drawers (Rounded C), $radius-05 for modals and sheets (Rounded D), and $radius-06 for toggles, extended FABs and buttons (Rounded E)."}
{"prompt": "What is the purpose of spacing in the PIE design system?", "completion": "In the PIE design system, spacing is used to create horizontal and vertical distance between or around different design elements. It helps in defining the relationships between components, layout, and viewport size, and in creating meaningful blocks of content. It also aids in maintaining a consistent rhythm within the overall composition and layout of designs."}
{"prompt": "What are the types of spacing used in the PIE design system?", "completion": "The PIE design system uses several types of spacing including padding, margins, and dimensions. Padding is the distance between the edge of an element and its content. Margins are the distances between components. Dimensions describe the overall width and height of a component or design element."}
{"prompt": "What is the 'element first' approach in the PIE design system?", "completion": "The 'element first' approach in the PIE design system means that the sizing of components and design elements takes priority when matched to the predetermined spatial system. This approach is followed to keep a consistent rhythm within the overall composition and layout of designs."}
{"prompt": "What are the two different spacing concepts in the PIE design system?", "completion": "The PIE design system defines two different spacing concepts: Default and Compact. Default spacing uses bigger space measures for its components’ paddings, margins and dimensions to improve readability and visibility. Compact spacing uses smaller space measures for its components’ paddings, margins and dimensions to economise the space used in the screen."}
{"prompt": "What are the alias spacing tokens in the PIE design system?", "completion": "The PIE design system provides alias spacing tokens for consistent use of spaces. These include $spacing-00 for no spacing, $spacing-01 for 4dp/sp/px or 0.25rem spacing, $spacing-02 for 8dp/sp/px or 0.5rem spacing, $spacing-03 for 12dp/sp/px or 0.75rem spacing, $spacing-04 for 16dp/sp/px or 1rem spacing, $spacing-05 for 24dp/sp/px or 1.5rem spacing, $spacing-06 for 32dp/sp/px or 2rem spacing, $spacing-07 for 40dp/sp/px or 2.5rem spacing, $spacing-08 for 56dp/sp/px or 3.5rem spacing, $spacing-09 for 64dp/sp/px or 4rem spacing, and $spacing-10 for 80dp/sp/px or 5rem spacing."}
{"prompt": "What is the purpose of typography in the PIE design system?", "completion": "In the PIE design system, typography works with layouts to present content in a clear hierarchy and in a way that's easy to read. It helps to communicate information effectively and efficiently."}
{"prompt": "What are the font families used in the PIE design system?", "completion": "The PIE design system uses three different font families for its products and communications: JET Sans Digital, Arial, and PT Mono. JET Sans Digital is the primary font family, Arial is used only as a fallback font, and PT Mono is used only for snippets of code."}
{"prompt": "What is the type scale in the PIE design system?", "completion": "The type scale in the PIE design system uses multiples of 4 for type sizes and line heights to align with the 4px vertical grid. This helps to maintain a consistent rhythm and balance in the design."}
{"prompt": "How does the PIE design system handle responsive type?", "completion": "In the PIE design system, different values are assigned to some typographic styles depending on the size of users’ screens. Wider screens use bigger type sizes and more generous spacing, while narrow screens use tighter and smaller type settings. Only the heading and subheading typographic styles are responsive, while the body styles are the same for all screens."}
{"prompt": "What are the font weights used in the PIE design system?", "completion": "The PIE design system uses three types of font weight: Extra-bold, Bold, and Regular. Font weights are important when adding emphasis and hierarchy to designs. A bold font weight will always draw the user’s attention more than a lighter weight. To keep the hierarchy and make things simpler, bold weights are used on all headings and button styles on all themes. Body copy, subheadings and captions use the regular weight by default, although body and caption styles also allow fonts to be bolded to add emphasis to a word or small phrase."}
{"prompt": "What are the font styles used in the PIE design system?", "completion": "The PIE design system uses two font styles to emphasise different features of its typographic styles: Underline and Strikethrough. Underlines are used for interactive elements such as links, especially when they are placed inside a block of text. Strikethrough is used when indicating something is no longer valid, but can still be read by users so they can understand the context."}
{"prompt": "How does the PIE design system handle text alignment?", "completion": "The PIE design system defines three types of text alignment: Left aligned, Centre aligned, and Right aligned. Left alignment is the preferred way to align text within products because it makes it easier to identify the start of a new line (for left-to-right languages). Centre alignment should be used sparingly, and should never be considered as the primary way to align text in designs unless there is a specific need for it. Right alignment should also be used sparingly, and is usually found in chunks of complex numeric data, where alignment of the decimals is key to assist readability."}
{"prompt": "What is the recommended line length in the PIE design system?", "completion": "In the PIE design system, a good practice is to have a maximum line length of between 80 and 100 characters, with a minimum of 60. Setting the right line length is key to the readability of the text in products."}
{"prompt": "What is the difference between wide screens and narrow screens in the PIE design system?", "completion": "In the PIE design system, different values are assigned to some typographic styles depending on the size of users’ screens. Wider screens use bigger type sizes and more generous spacing, while narrow screens use tighter and smaller type settings. For example, the $heading-L looks different on wide and narrow screens."}
{"prompt": "What is the PIE Design System?", "completion": "The PIE Design System is Just Eat Takeaway.com’s global principles for interfaces and experiences. It provides guidelines and resources for designers and engineers to use in their products."}
{"prompt": "Who maintains the PIE Design System?", "completion": "The PIE Design System is maintained by the PIE Team at Just Eat Takeaway.com."}
{"prompt": "How can designers use the PIE Design System?", "completion": "Designers can use the PIE Design System in their products and there are many ways the system can support them and their team. They can enable PIE foundation and component libraries in Figma and apply them to their designs."}
{"prompt": "How can engineers use the PIE Design System?", "completion": "Engineers can learn about the PIE repository and start using foundations and components in their projects. The system provides guidelines and resources for implementing the design principles in their work."}
{"prompt": "How can I get support for using the PIE Design System?", "completion": "If you have any questions, ideas or suggestions about the PIE Design System, you can check out the FAQs or get in touch with the PIE Team."}
{"prompt": "What is the design tool of choice for building the PIE design system?", "completion": "Figma is the design tool of choice for building the PIE design system. All design-related foundations, components, and assets are stored in Figma libraries and files."}
{"prompt": "How is PIE structured in Figma?", "completion": "PIE is split into three parts in Figma: foundations, components, and assets. Each of these are arranged into libraries, so they can be easily found and referenced. Foundations include elements like colour, typography, elevation, radius, spacing and others. Components include elements like buttons, labels, chips, input fields and more. Assets include images used across JET products, such as icons and illustrations."}
{"prompt": "What are the foundation libraries in the PIE design system?", "completion": "Foundations are the building blocks of the PIE design system. They include elements like colour, typography, elevation, radius, spacing and others. Foundations are split into two themes: PIE 2.0 Light and PIE 2.0 Dark. Each theme has its own library."}
{"prompt": "What are the core components libraries in the PIE design system?", "completion": "Core components are the pieces used to create JET products. They include elements like buttons, labels, chips, input fields and more. The core components are also split into two themes: PIE 2.0 Light and PIE 2.0 Dark. Each theme has its own library."}
{"prompt": "What are the asset libraries in the PIE design system?", "completion": "Assets are the images used across JET products, such as icons and illustrations. They are owned by PIE designers in collaboration with the JET Creative Studio (Brand team)."}
{"prompt": "What are the business area libraries in the PIE design system?", "completion": "Business area libraries contain components which are unique to a specific business area, such as Customer, Partner or Operations. These libraries are owned by designers in the relevant business area. PIE designers will occasionally review these libraries to ensure the components are consistent with the main component libraries."}
{"prompt": "How can a designer get started with the PIE design system?", "completion": "A designer can get started with the PIE design system by enabling the PIE libraries in Figma. As a designer within the Just Eat Takeaway organisation, they'll automatically have access to all of PIE’s libraries and files. If they don't have access, they can get in touch with the PIE team to request it."}
{"prompt": "What are the prerequisites for running the PIE project?", "completion": "The prerequisites for running the PIE project include having git-secrets installed, Yarn 2+, and NodeJS 16.x installed on your machine."}
{"prompt": "What is the purpose of the TURBO_TOKEN environment variable in the PIE project?", "completion": "The TURBO_TOKEN environment variable is used to enable remote caching functionality with Turborepo in AWS S3. This speeds up local development and CI workflows by publishing build artifacts to AWS S3, ensuring that only modified packages have their build tasks executed."}
{"prompt": "How does the PIE project handle versioning and publishing of packages?", "completion": "The PIE project uses Changesets for versioning and publishing packages. Changesets are required for major, minor, and patch changes that affect consumers. To add a changeset, a script is run locally in the root of the project, which prompts the user to select the affected packages and the type of change. This creates a file in the .changesets directory, which should be committed and included with the PR."}
{"prompt": "What are the different tags used in the PIE project for versioning?", "completion": "The PIE project uses three different tags for versioning: 'latest', 'beta', and 'next'. The 'latest' tag is used for stable versions, the 'beta' tag is used for experimental changes ready for early adoption and testing, and the 'next' tag is used for larger, unstable changes that may require multiple PRs across several packages before release."}
{"prompt": "What is the purpose of the example apps in the PIE project?", "completion": "The example apps in the PIE project are intended to be used with specific versions of node for testing purposes. For example, the Nuxt 2 app should be used with Node 16. The supported Node versions for each example application can be found in the 'engines' section of the example application."}
{"prompt": "What tools does the PIE project use for commit messages?", "completion": "The PIE project uses Commitizen in combination with Commitlint to ensure commit messages conform with the Conventional Commits specification. This standardised format ensures commit messages are more descriptive and provide context to contributors working in the codebase. The recommended command for committing new changes is 'yarn cz'."}
{"prompt": "What is Turborepo and how is it used in the PIE project?", "completion": "Turborepo is an intelligent build system optimized for JavaScript and TypeScript codebases. It is used in the PIE project to facilitate the execution of all build scripts within the monorepo."}
{"prompt": "What is the purpose of the pie-icons package in the PIE project?", "completion": "The pie-icons package is a collection of SVG files that represent the PIE Icon Set. These icons can be used in various ways, such as in img, background-image, inline, object, embed, iframe, and more. The package also provides additional ways to use the icons, such as through client-side JavaScript or Node."}
{"prompt": "How can I add a new icon to the pie-icons package?", "completion": "To add a new icon to the pie-icons package, first check the icon list to avoid duplications. Then, add the SVG file after running it through svgomg with the default settings applied. Make sure to turn off the 'Clean IDs' setting and turn on the 'Prefer viewBox to width/height' and 'Prettify markup' settings. Also, prefix all the ids in the files with the icon name to avoid conflicts and markup invalidation."}
{"prompt": "How can I use the pie-icons package using native JavaScript?", "completion": "To use the pie-icons package using native JavaScript, first install the package using npm or Yarn, or copy pie-icons.js or pie-icons.min.js into your project directory. Then, include pie-icons.js or pie-icons.min.js with a script tag or load the script from a CDN provider. After including the script, pieicons will be available as a global variable. To use an icon on your page, add a data-pie-icons attribute with the icon name to an element, and then call the pieicons.replace() method."}
{"prompt": "How can I use the pie-icons package in Node?", "completion": "To use the pie-icons package in Node, first install the package using npm or Yarn. Then, require the package in your script. You can then access the icons using pieicons.icons.x, where x is the name of the icon. You can also use the toSvg() method to return an SVG string."}
{"prompt": "What is the pieicons.replace() method?", "completion": "The pieicons.replace() method replaces all elements that have a data-pie-icons attribute with SVG markup corresponding to the element's data-pie-icons attribute value. You can pass the method an attrs object to map key-value pairs to HTML attributes on the SVG tag. All attributes on the placeholder element will be copied to the SVG tag."}
{"prompt": "What is the origin of the pie-icons project?", "completion": "The pie-icons project owes a great deal to the Feather SVG Icon Library. It started as a fork of that project for developers at Just Eat to build out icons, while also providing a platform for the initial build and API that Feather had already built."}
{"prompt": "What is the purpose of the pie-icons-configs package in the PIE project?", "completion": "The pie-icons-configs package provides shared configurations and utility functions used to be the single source of truth for the icon packages' behavior (pie-icons-react and pie-icons-vue). It helps to determine which classes are assigned to different component sizes and ensure consistent sizing according to the pre-determined shared rules. It is an internal package, therefore it's not intended for end-consumer usage."}
{"prompt": "How can I use the pie-icons-configs package?", "completion": "To use the pie-icons-configs package, first install the package using Yarn. Then, import the desired config or function from the common config file. For example, you can import the sizeToClassMap from the package. If you are using a framework, use the dedicated export for it."}
{"prompt": "How can I use the pie-icons-configs package with React?", "completion": "To use the pie-icons-configs package with React, import the getSvgProps function from the configs-react export. For example, you can use the following import statement: import { getSvgProps } from '@justeattakeaway/pie-icons-configs/configs-react'."}
{"prompt": "How can I use the pie-icons-configs package with Vue?", "completion": "To use the pie-icons-configs package with Vue, import the updateContextData function from the configs-vue export. For example, you can use the following import statement: import { updateContextData } from '@justeattakeaway/pie-icons-configs/configs-vue'."}
{"prompt": "How can I test the pie-icons-configs package?", "completion": "You can test the pie-icons-configs package by running the command 'yarn test'. The tests were added to ensure the utility functions behavior consistency."}
{"prompt": "How can I contribute to the pie-icons-configs package?", "completion": "Before starting to contribute to the pie-icons-configs package, you should read the contributing guide provided by the PIE project."}
{"prompt": "What is the purpose of the pie-icons-react package in the PIE project?", "completion": "The pie-icons-react package provides shared PIE Icon Components for ReactJS. It generates an iconset for React applications using the base pie-icons package. The SVGs in pie-icons are compiled into single file components that can be imported into React applications. The icons are bundled in CommonJS and ES Modules, to be more easily adopted for modern React Applications."}
{"prompt": "How can I install the pie-icons-react package?", "completion": "You can install the pie-icons-react package by adding the module to your project using Yarn. The command to do this is 'yarn add @justeattakeaway/pie-icons-react'."}
{"prompt": "How can I use the pie-icons-react package in a React application?", "completion": "To use the pie-icons-react package in a React application, you can import the icons you want to use from the package. For example, you can use the following import statement: 'import { IconAlertTriangleLarge, IconCalendar } from \"@justeattakeaway/pie-icons-react\"'. You can then use these icons in your React components."}
{"prompt": "What are the size variants available for icons in the pie-icons-react package?", "completion": "Icons in the pie-icons-react package are available in two size variants: small and large. Small icons default size is 'xs' and can use one of the following pre-determined values for iconSize: 'xs', 's', 'm', 'l', 'xl', and 'xxl'. Large icons iconSize default and minimum value is 32. Values larger than the minimum must be multiples of 8, otherwise they will be automatically rounded."}
{"prompt": "What is tree shaking in the context of the pie-icons-react package?", "completion": "Tree shaking in the context of the pie-icons-react package refers to the automatic elimination of unused exports in this module when using ES imports with Webpack v4+ or Rollup. This optimizes the bundle size by only including the code that is actually used in the final bundle."}
{"prompt": "How can I contribute to the pie-icons-react package?", "completion": "To contribute to the pie-icons-react package, you should first read the contributing guide provided by the PIE project. Icons should be added as SVGs to the main pie-icons package and published, before simply incrementing the dependency of pie-icons in the pie-icons-react package, to generate the new set of React components. The PIE iconset is managed by the PIE design team and new icon requests should go through them to ensure that they are designed inline with the standards and guidelines."}
{"prompt": "How can I build the pie-icons-react module?", "completion": "You can build the pie-icons-react module by running the command 'yarn build' to compile the module."}
